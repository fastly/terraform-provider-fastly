---
layout: "fastly"
page_title: "Fastly: service_compute"
sidebar_current: "docs-fastly-resource-service-compute"
description: |-
  Provides an Fastly Compute service
---

# fastly_service_compute

Provides a Fastly Compute service. Compute is a computation platform capable of running custom binaries that you compile on your own systems and upload to Fastly. Security and portability is provided by compiling your code to [WebAssembly](https://webassembly.org/) using the `wasm32-wasi` target. A compute service encompasses Domains and Backends.

The Service resource requires a domain name that is correctly set up to direct traffic to the Fastly service. See Fastly's guide on [Adding CNAME Records](https://docs.fastly.com/en/guides/adding-cname-records) on their documentation site for guidance.

~> **Note:** If you omit the `package` block, you must set `activate = false` to avoid service validation errors.

## Activation and Staging

By default, the `activate` attribute is `true`, and the `stage`
attribute is `false`. This combination means that when `terraform
apply` is executed for a plan which will make changes to the service,
the last version created by the provider (the `cloned_version`) will
be cloned to make a draft version, the changes will be applied to that
draft version, and that draft version will be activated.

If desired, `activate` can be set to `false`, in which case the
behavior above will be modified such that cloning will only occur when
the `cloned_version` is locked, and the draft version will not be
activated.

Additionally, `stage` can be set to `true`, with `activate` set to
`false`. This extends the `activate = false` behavior to include
staging of applied changes, every time that changes are applied, even
if the changes were applied to an existing draft version.

Finally, `activate` should not be set to `true` when `stage` is also
set to `true`. While this combination will not cause any harm to the
service, there is no logical reason to both stage and activate every
set of applied changes.

## Example Usage

Basic usage:

{{ tffile "examples/resources/service_compute_basic_usage.tf" }}

<!-- remove this curated references once https://github.com/hashicorp/terraform-plugin-docs/issues/28 is resolved -->
### package block

The `package` block supports uploading or modifying Wasm packages for use in a Fastly Compute service. See Fastly's documentation on
[Compute](https://www.fastly.com/products/edge-compute/serverless)

## Product Enablement

The [Product Enablement](https://developer.fastly.com/reference/api/products/) APIs allow customers to enable and disable specific products.

Not all customers are entitled to use these endpoints and so care needs to be given when configuring a `product_enablement` block in your Terraform configuration.

Consult the [Product Enablement Guide](../guides/product_enablement) to understand the internal workings for the `product_enablement` block.

## Import

Fastly Services can be imported using their service ID, e.g.

{{ codefile "sh" "examples/resources/components/service_compute_import_cmd.txt" }}

By default, either the active version will be imported, or the latest version if no version is active.
Alternatively, a specific version of the service can be selected by appending an `@` followed by the version number to the service ID, e.g.

{{ codefile "sh" "examples/resources/components/service_compute_import_cmd_with_version.txt" }}

{{ .SchemaMarkdown | trimspace }}
